Pattern:

Model Classes :- Handle data, used to represent Users, Blog Posts, Images, etc

View Classes :- Handle HTML and events caused y the user (like clicks)

Extraction Approach:

Build class User as a 'mega' class with tons of methods

Refactor User to use composition

Refactor User to be a reusable class that can represent any piece
of data, not just a User

Class User:

private data: UserProps - Object to store information about a particular user (name, age)

get(propName: string): (string | number) - Gets a single piece of info about this user (name, age)

set(update: UserProps): void - Changes information about this user (name, age)

on(eventName: string, callback: () => {}) - Registers an event handler with this object, so other parts of the app know when something Changes

trigger(eventName: string): void - Triggers an event to tell other parts of the app that something has changed

fetch(): Promise - Fetches some data from the server about a particular user

save(): Promise - Save some data about this user to the server 

start json server using the command - json-server -w db.json

Show HTML File of user 

-> User Edit ---> UserShow
     | ------> UserForm

Each view must produce HTML 

We should be able to nest one view's HTML in another

We need to have a good way to handle user events (clicking, typing, etc)

There will probably be a tight coupling between a view and a Model

We need to be able to reach into the HTML produced by a view and get a specific element

Rendering Timeline

Call 'render' method 

Render calls 'template', gets HTML string

Render inserts HTML string into a template element

We should somehow bind event handlers t the HTML in There

Render inserts content of template into DOM

Binding:

Call 'render' method 

Render calls 'template', gets HTML string

Render inserts HTML string into a template element

Bind event handlers to the HTML in the template element

Render inserts content of template into DOM

regions map:

Call 'render' method 

Render calls 'template', gets HTML string

Render inserts HTML string into a template element

Bind event handlers to the HTML in the template element

Call 'regionMap' for list of regions that need to be created

Render method populates values in 'regions'

We somehow insert new 'child' views in those regions

Render inserts content of template into DOM