Composition:

class Wall                                |---> class Rectangle
 -> color: string                         |      -> height: number
 -> area(): number --|                    |      -> width: number 
 -> dimensions: Shape --------------------|      -> area(): number 
                                          |
 class Window                             |---> class Circle 
  -> open: boolean                                -> radius: number 
  -> toggleOpen(): void                           -> area(): number 
  -> arae(): number 
  -> dimensions: Shape 

Above Wall or Window class need to have some reference to the Shape

Thats why we use dimension

A class will have reference to another object and pass it through class instance 

Example:

const rectangular = (state) => {
  return {
    area: () => {
      return state.height * state.width;
    }
  };
};

const openable = (state) => {
  return {
    toggleOpen: () => {
      state.open = !state.open
    }
  };
};

const buildRectangleWindow = (state) => {
  return Object.assign(state, rectangular(state), openable(state))
};

const rectangleWindow = buildRectangleWindow({
  height: 20,
  width: 20,
  open: false
})

rectangleWindow.open - false
rectangleWindow.toggleOpen() 
rectangleWindow.open - true

more object methods combined to create reusable object

if we have two object with same methods combined we will have confusion see area method remember

Normally what we are using is multiple inheritance

openable
open: boolean
toggleOpen(): void  -------|
                           | ------- RectangleWindow
rectangle------------------|
height: number 
width: number 
area(): number 